{
    "rank": 813,
    "username": "dead11",
    "score": 19,
    "finish_time": "00:52:04",
    "Q1": {
        "solve_time": "00:07:22",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    bool adj(string &A){\n        for(int i = 1;i < A.length();i++){\n            if(A[i] == A[i-1]) return 1;\n        }\n        return 0;\n    }\n    bool strongPasswordCheckerII(string A) {\n        int N = A.length();\n        if(N < 8) return 0;\n        unordered_set<char> sp = {'!','@','#','$','%','^','&','*','(',')','-','+'};\n        if(adj(A)) return 0;\n        \n        bool up = 0,lw = 0,spc = 0,num = 0;\n        \n        for(auto i : A){\n            if(i >= 'a' and i <= 'z') lw = 1;\n            else if(i >= 'A' and i <= 'Z') up = 1;\n            else if(i >= '0' and i <= '9') num = 1;\n            else spc = 1;\n        }\n        return lw and up and num and spc; \n    }\n};"
    },
    "Q2": {
        "solve_time": "00:16:51",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int F(vector<int> &P,long long x,int k){\n        int i = -1,j = P.size();\n        while(i + 1 < j){\n            int m = i + (j - i)/2;\n            if(1ll * P[m] * k >= x) j = m;\n            else i = m;\n        }\n        return P.size() - j;\n    }\n    vector<int> successfulPairs(vector<int>& S, vector<int>& P, long long x) {\n        vector<int> Ans;\n        sort(P.begin(),P.end());\n        for(auto i : S){\n            int ind = F(P,x,i);\n            Ans.push_back(ind);\n        }\n        return Ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:47:04",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    unordered_map<char,unordered_set<char>> Mp;\n    bool canWe(string &A,string &B){\n        for(int i = 0;i < A.length();i++){\n            if(A[i] == B[i] || Mp[B[i]].find(A[i]) != Mp[B[i]].end()) continue;\n            else return 0;\n        }\n        return 1;\n    }\n    bool matchReplacement(string s, string A, vector<vector<char>>& Mpp) {\n        int N = s.length(),M = A.length();\n        vector<string> hash;\n        for(auto i : Mpp) Mp[i[0]].insert(i[1]);\n        for(int i = 0;i <= N - M;i++){\n            hash.push_back(s.substr(i,M));\n        }\n        for(auto i : hash){\n            if(canWe(i,A)) return 1;\n        }\n        return 0;\n    }\n};"
    },
    "Q4": {
        "solve_time": "00:27:39",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& A, long long k) {\n        long long Ans = 0,sum = 0;\n        int i = 0;\n        for(int j = 0;j < A.size();j++){\n            sum += A[j];\n            while(sum * (j - i + 1) >= k){\n                sum -= A[i];\n                i++;\n            }\n            Ans += (0ll + j - i + 1);\n        }\n        return Ans;\n    }\n};"
    }
}
